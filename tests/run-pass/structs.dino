struct Counter {
    count: int,
}

impl Counter {
    /// Create and return a new counter
    fn new() -> Self {
        Self {
            count: 0,
        }
    }

    /// Returns the value of the counter
    fn value(self) -> int {
        self.count
    }

    /// Increment the counter
    fn incr(self) {
        self.incr_by(1);
    }

    /// Increment the counter by the given value
    fn incr_by(self, value: int) {
        self.count = self.count + value;
    }

    /// Decrement the counter
    fn decr(self) {
        self.count = self.count - 1;
    }

    fn add(self, other: Self) {
        self.count = self.count + other.count;
    }
}

struct Game {
    team_a_name: bstr,
    team_a: Counter,
    team_b_name: bstr,
    team_b: Counter,
}

impl Game {
    fn new(team_a_name: bstr, team_b_name: bstr) -> Self {
        Self {
            // Note that field names do not have to be in order
            // The code for each field will be executed in source order
            team_a_name,
            team_b_name,
            team_b: Counter::new(),
            team_a: Counter::new(),
        }
    }

    /// Returns the name of team A
    fn team_a_name(self) -> bstr {
        self.team_a_name
    }

    /// Returns the name of team B
    fn team_b_name(self) -> bstr {
        self.team_b_name
    }

    /// Increments the score of team A
    fn team_a_scores(self) {
        self.team_a.incr();
    }

    /// Increments the score of team B
    fn team_b_scores(self) {
        self.team_b.incr();
    }

    /// Prints out the winner of the game based on who has the higher score
    fn print_winner(self) {
        let a_score = self.team_a.value();
        let b_score = self.team_b.value();
        if a_score > b_score {
            print_bstr(self.team_a_name);
            print_bstr(b"a wins");
        } else if a_score < b_score {
            print_bstr(self.team_b_name);
            print_bstr(b"b wins");
        } else {
            print_bstr(b"tie");
        }
    }
}

fn test_counter() {
    print_bstr(b"counter");
    let counter = Counter::new();
    print_int(counter.value());

    counter.incr();
    print_int(counter.value());

    counter.incr();
    print_int(counter.value());

    counter.decr();
    print_int(counter.value());

    counter.decr();
    print_int(counter.value());

    counter.decr();
    print_int(counter.value());

    while counter.value() < 10 {
        counter.incr();
    }
    print_int(counter.value());

    counter.incr_by(34);
    print_int(counter.value());

    print_bstr(b"counter2");
    let counter2 = Counter::new();
    counter2.incr_by(counter.value() / 2);
    print_int(counter2.value());
    counter2.add(counter);
    print_int(counter.value());
    print_int(counter2.value());
}

fn test_game() {
    print_bstr(b"game");
    let game = Game::new(b"team rocket", b"team taco");

    game.team_a_scores();
    game.team_b_scores();
    game.team_a_scores();
    game.team_a_scores();

    game.print_winner();
}

fn main() {
    test_counter();
    test_game();
}
