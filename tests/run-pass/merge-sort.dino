//! A program that reads a line of text as input, sorts it, and then outputs the
//! sorted string.

fn main() {
    // Continue forever until the user quits the program with Ctrl-C
    while true {
        print_bstr(b"Enter some text: ");
        let input = read_line_bstr();
        let output = merge_sort(input);
        print_bstr(output);
        // Print empty line for formatting purposes
        print_bstr(b"");
    }
}

fn merge_sort(input: bstr) -> bstr {
    let input_len = bstr_len(input);

    // Base case: return a single character (or nothing)
    if input_len.lte(1) {
        return input;
    }

    // Split the string and sort each half
    let left = bstr_slice(input, 0, input_len.div(2));
    let right = bstr_slice(input, input_len.div(2), input_len);

    let sorted_left = merge_sort(left);
    let sorted_right = merge_sort(right);

    // Merge the two halves together to get a single sorted string
    merge(sorted_left, sorted_right)
}

/// Merges two sorted strings into a single sorted string
fn merge(left: bstr, right: bstr) -> bstr {
    let left_len = bstr_len(left);
    let right_len = bstr_len(right);

    let left_i: int = 0;
    let right_i: int = 0;

    let output = b"";
    // Continue until one of the strings runs out of characters
    while bool_and(left_i.lt(left_len), right_i.lt(right_len)) {
        let left_byte = bstr_get(left, left_i);
        let right_byte = bstr_get(right, right_i);

        if bstr_lt(left_byte, right_byte) {
            output = bstr_concat(output, left_byte);
            left_i = left_i.add(1);
        } else { // bstr_gte(left_byte, right_byte)
            output = bstr_concat(output, right_byte);
            right_i = right_i.add(1);
        }
    }

    // Append any remaining characters on to the string
    // Only one of these loops will run
    while left_i.lt(left_len) {
        output = bstr_concat(output, bstr_get(left, left_i));
        left_i = left_i.add(1);
    }
    while right_i.lt(right_len) {
        output = bstr_concat(output, bstr_get(right, right_i));
        right_i = right_i.add(1);
    }

    output
}
