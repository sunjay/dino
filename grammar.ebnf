decl ::= use_decl | struct_decl | impl_decl | func_decl

use_decl ::= 'use' import_path ';'
import_path ::= (path_component '::')* import_path_selection
import_path_selection ::= path_component | '*' | '{' import_names '}'
import_names ::= (import_name ',')* import_name?
import_name ::= (ident | 'self') ('as' ident)?

struct_decl ::= 'struct' ident '{' struct_fields '}'
struct_fields ::= (struct_field ',')* struct_field?
struct_field ::= ident ':' ty

impl_decl ::= 'impl' ty '{' func_decl* '}'

func_decl ::= 'fn' ident func_sig block
func_sig ::= '(' func_params ')' ('->' ty)?
func_params ::= (func_param ',')* func_param?
func_param ::= 'self' | ident ':' ty

block ::= '{' (decl | stmt)* expr? '}'
stmt ::= cond | while_loop | var_decl | expr ';'
while_loop ::= 'while' expr block
var_decl ::= 'let' ident (':' ty)? '=' expr ';'

(* precedence levels start at 0 and go up *)
expr ::= prec0

(* Associativity:
   * left to right:
     prec(N) = prec(N+1) ('op' prec(N+1))*
   * right to left:
     prec(N) = prec(N+1) 'op' expr | prec(N+1)
   * none (requires parentheses):
     prec(N) = prec(N+1) 'op' prec(N+1) | prec(N+1)
*)
prec0 ::= 'return' expr? | 'break' | 'continue' | prec1
prec1 ::= prec2 '=' expr | prec2
prec2 ::= prec3 ('||' prec3)*
prec3 ::= prec4 ('&&' prec4)*
prec4 ::= prec5 ('==' | '!=' | '<' | '>' | '<=' | '>=') prec5 | prec5
prec5 ::= prec6 ('|' prec6)*
prec6 ::= prec7 ('^' prec7)*
prec7 ::= prec8 ('&' prec8)*
prec8 ::= prec9 (('<<' | '>>') prec9)*
prec9 ::= prec10 (('+' | '-') prec10)*
prec10 ::= prec11 (('*' | '/' | '%') prec11)*
prec11 ::= prec12 ('as' prec12)*
prec12 ::= ('-' | '!')? prec13
prec13 ::= prec14 ('(' func_args ')' | '[' expr ']')*
prec14 ::= prec15 ('.' ident ('(' func_args ')')?)*
prec15 ::= '(' expr ')' | cond | struct_lit | bstr_lit | int_lit |
           real_lit | complex_lit | bool_lit | unit_lit | 'self' | path

cond ::= 'if' expr block ('else' 'if' expr block)* ('else' block)?
func_args ::= (expr ',')* expr?
struct_lit ::= named_ty '{' struct_field_values '}'
struct_field_values ::= (struct_field_value ',')* struct_field_value?
struct_field_value ::= ident ':' expr
bool_lit ::= 'true' | 'false'
unit_lit ::= '(' ')'

ty ::= '(' ')' | named_ty
named_ty ::=  'Self' | path | ident

path ::= (path_component '::')* path_component
path_component ::= 'package' | 'Self' | 'self' | 'super' | ident
